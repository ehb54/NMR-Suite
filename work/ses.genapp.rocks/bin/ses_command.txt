field_ids_to_exclude = ["runname", "pdb_flag"] # field ids that won't be used for the command
runname = str(json_variables["runname"])

if not os.path.exists(runname):
    os.mkdir(runname)

os.chdir(runname)

if not os.path.exists("SES"):
    os.mkdir("SES")

os.chdir("SES")

# Gets role id and type for each field variable, puts into 3 lists
field_roles = [str(element['role']) for element in data['fields']]
field_ids = [str(element['id']) for element in data['fields']]
field_types = [str(element['type']) for element in data['fields']]    

indices_to_remove = []

#output = str(field_ids)

# Removes fields with the wrong id
for i, field_id in enumerate(field_ids):
    if (field_ids[i] in field_ids_to_exclude):
        indices_to_remove.append(i)

for index in sorted(indices_to_remove, reverse=True):
    del field_roles[index]
    del field_ids[index]
    del field_types[index]

#printQuit(output + "\n\n" + str(field_ids))

length = len(field_roles)
if (length != len(field_ids) or length != len(field_types)):
    raise Exception ("ERROR => Invalid module definition JSON.")

field_ids_to_field_types = OrderedDict()
input_length = 0

# Creates dictionary mapping field ids to field types only for fields that have the 'input' role
# and a type that's not 'label' since the others are irrelevant to the program
for i in range (length):
    if (field_roles[i] == "input" and field_types[i] != "label"):
        field_ids_to_field_types[field_ids[i]] = field_types[i]
        input_length += 1

command = "java -jar {}sesgeneral-1.1.jar".format(bin_prefix)

# Generation of "field_flags_to_field_ids" array
field_flags_to_field_ids = {} # For each field, contains {[command line flag]: [JSON input ID]}
field_flags_to_field_ids["K"] = "number_topsolution"
field_flags_to_field_ids["align"] = "align"
field_flags_to_field_ids["best"] = "nnls"
field_flags_to_field_ids["data"] = "datafile"
field_flags_to_field_ids["l0max"] = "l0max"
field_flags_to_field_ids["matrix"] = "matrixfile"
field_flags_to_field_ids["maxsum"] = "maxsum"
field_flags_to_field_ids["out"] = "outputdir"
field_flags_to_field_ids["outalign"] = "outalign"
field_flags_to_field_ids["pdb"] = "pdbdirectory"
field_flags_to_field_ids["precond"] = "precond"
field_flags_to_field_ids["reltol"] = "reltol"
field_flags_to_field_ids["rmsd"] = "rmsd"
#field_flags_to_field_ids["storejava"] = "storejava"
field_flags_to_field_ids["top"] = "toperror"

# Reverses the dictionary
field_ids_to_field_flags = {v: k for k, v in field_flags_to_field_ids.items()}

field_ids_to_field_types_list = list(field_ids_to_field_types.items())

json_variables_keys = json_variables.keys()

# Generation of "field_flags_to_field_inputs" array
field_flags_to_field_inputs = {} # For each field, contains {[command line flag]: [user input for field]}
for i in range (input_length):
    field_id, field_type = field_ids_to_field_types_list[i]
    if field_id in json_variables_keys:
        field_raw_input = json_variables[field_id]
        if (field_id not in field_ids_to_field_flags.keys()):
            raise Exception ("ERROR => There is no output flag that matches to the field id '{}'. Please change the 'field_flags_to_field_ids dictionary.".format(field_id))
        field_flag = field_ids_to_field_flags[field_id]
        try:
            field_input = changeType(field_raw_input, field_type)
        except:
            raise Exception ("ERROR => Cannot convert {} to the type '{}'".format(field_raw_input, field_type))
        field_flags_to_field_inputs[field_flag] = field_input

adjusted_precond = int(field_flags_to_field_inputs["precond"]) - 1
field_flags_to_field_inputs["precond"] = str(adjusted_precond)

# Creates the command that needs to be run in the command line
for field_flag, field_input in field_flags_to_field_inputs.items():
    if (field_flag not in field_flags_to_field_ids.keys()):
            raise Exception ("ERROR => There is no field id set to correspond with the field flag '{}'. Please change the 'field_flags_to_field_ids dictionary.".format(field_flag))
    else:
        field_id = field_flags_to_field_ids[field_flag]
    field_type = field_ids_to_field_types[field_id]
    if field_type == 'checkbox':
        command += ' -{}'.format(str(field_flag))
    else:
        command += ' -{} "{}"'.format(str(field_flag), str(field_input))

# Creates output directory if needed
output_directory = field_flags_to_field_inputs["out"]
if not os.path.exists(output_directory):
    os.mkdir(output_directory)
